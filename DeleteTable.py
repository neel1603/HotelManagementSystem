import sqlite3
from tkinter import *
class DeleteTable:
    def deleteEmployee(self,mode):
        if mode==1:
            conn = sqlite3.connect('Hotel_Management.db')
            conn.execute("PRAGMA foreign_keys = 1")
            c = conn.cursor()
            w = Tk()
            w.iconbitmap(r'favicon.ico')
            Label(w,text='Enter EID:').pack()
            eid=Entry(w)
            eid.pack()
            Button(w,text='Delete',command=lambda: c.execute("DELETE FROM employee WHERE EID=(?)",(eid.get(),))).pack()
            w.mainloop()
            conn.commit()
            conn.close()
        else:
            conn = sqlite3.connect('Hotel_Management.db')
            conn.execute("PRAGMA foreign_keys = 1")
            c = conn.cursor()
            w = Tk()
            w.iconbitmap(r'favicon.ico')
            Label(w,text='Enter EID:').pack()
            eid=Entry(w)
            eid.pack()
            Label(w,text='Enter OID:').pack()
            oid=Entry(w)
            oid.pack()
            Label(w,text='Enter HOTELID:').pack()
            hotelid=Entry(w)
            hotelid.pack()
            Button(w,text='Delete',command=lambda: c.execute("""DELETE FROM employee WHERE EID=(?) AND
                        (HOTELID=(?) OR WORKSHOTELID=(?)) AND
                        (?) IN (SELECT HOTELID FROM hotel WHERE OID=(?));""",(eid.get(),hotelid.get(),hotelid.get(),hotelid.get(),oid.get()))).pack()
            w.mainloop()
            conn.commit()
            conn.close()
    def deleteHotel(self):
        conn = sqlite3.connect('Hotel_Management.db')
        conn.execute("PRAGMA foreign_keys = 1")
        c = conn.cursor()
        w = Tk()
        w.iconbitmap(r'favicon.ico')
        Label(w,text='Enter HOTELID:').pack()
        hotelid=Entry(w)
        hotelid.pack()
        Button(w,text='Delete',command=lambda: c.execute("DELETE FROM hotel WHERE HOTELID=(?)",(hotelid.get(),))).pack()
        w.mainloop()
        conn.commit()
        conn.close()
    def deleteOwner(self):
        conn = sqlite3.connect('Hotel_Management.db')
        conn.execute("PRAGMA foreign_keys = 1")
        c = conn.cursor()
        w = Tk()
        w.iconbitmap(r'favicon.ico')
        Label(w,text='Enter OID:').pack()
        oid=Entry(w)
        oid.pack()
        Button(w,text='Delete',command=lambda: c.execute("DELETE FROM owner WHERE OID=(?)",(oid.get(),))).pack()
        w.mainloop()
        conn.commit()
        conn.close()
    def deleteCustomer(self):
        conn = sqlite3.connect('Hotel_Management.db')
        conn.execute("PRAGMA foreign_keys = 1")
        c = conn.cursor()
        w = Tk()
        w.iconbitmap(r'favicon.ico')
        Label(w,text='Enter CID:').pack()
        cid=Entry(w)
        cid.pack()
        Button(w,text='Delete',command=lambda: c.execute("DELETE FROM customer WHERE CID=(?)",(cid.get(),))).pack()
        w.mainloop()
        conn.commit()
        conn.close()

    def deleteBooking(self):
        conn = sqlite3.connect('Hotel_Management.db')
        conn.execute("PRAGMA foreign_keys = 1")
        c = conn.cursor()
        w = Tk()
        w.iconbitmap(r'favicon.ico')
        Label(w,text='Enter CID:').pack()
        cid=Entry(w)
        cid.pack()
        Label(w,text='Enter HOTELID:').pack()
        hotelid=Entry(w)
        hotelid.pack()
        Button(w,text='Delete',command=lambda: c.execute("DELETE FROM booking WHERE CID=(?) AND HOTELID=(?)",(cid.get(),hotelid.get()))).pack()
        w.mainloop()
        conn.commit()
        conn.close()

    def deleteBill(self):
        conn = sqlite3.connect('Hotel_Management.db')
        conn.execute("PRAGMA foreign_keys = 1")
        c = conn.cursor()
        w = Tk()
        w.iconbitmap(r'favicon.ico')
        Label(w,text='Enter CID:').pack()
        cid=Entry(w)
        cid.pack()
        Label(w,text='Enter BILLID:').pack()
        billid=Entry(w)
        billid.pack()
        Button(w,text='Delete',command=lambda: c.execute("DELETE FROM bill WHERE CID=(?) AND BILLID=(?)",(cid.get(),billid.get()))).pack()
        w.mainloop()
        conn.commit()
        conn.close()

    def deleteServices(self,mode):
        if mode==1:
            conn = sqlite3.connect('Hotel_Management.db')
            conn.execute("PRAGMA foreign_keys = 1")
            c = conn.cursor()
            w = Tk()
            w.iconbitmap(r'favicon.ico')
            Label(w,text='Enter SNO:').pack()
            sno=Entry(w)
            sno.pack()
            Button(w,text='Delete',command=lambda: c.execute("DELETE FROM services WHERE SNO=(?)",(sno.get(),))).pack()
            w.mainloop()
            conn.commit()
            conn.close()
        else:
            conn = sqlite3.connect('Hotel_Management.db')
            conn.execute("PRAGMA foreign_keys = 1")
            c = conn.cursor()
            w = Tk()
            w.iconbitmap(r'favicon.ico')
            Label(w,text='Enter SNO:').pack()
            sno=Entry(w)
            sno.pack()
            Label(w,text='Enter OID:').pack()
            oid=Entry(w)
            oid.pack()
            Label(w,text='Enter HotelId:').pack()
            hotelid=Entry(w)
            hotelid.pack()
            Button(w,text='Delete',command=lambda: c.execute("""DELETE FROM services WHERE SNO=(?) AND SNO IN (SELECT SNO FROM provides WHERE HOTELID=(?))
                        AND (?) IN (SELECT HOTELID FROM hotel WHERE OID=(?));""",(sno.get(),hotelid.get(),hotelid.get(),oid.get()))).pack()
            w.mainloop()
            conn.commit()
            conn.close()

    def deleteProvides(self):
        conn = sqlite3.connect('Hotel_Management.db')
        conn.execute("PRAGMA foreign_keys = 1")
        c = conn.cursor()
        w = Tk()
        w.iconbitmap(r'favicon.ico')
        Label(w,text='Enter HOTELID:').pack()
        hotelid=Entry(w)
        hotelid.pack()
        Label(w,text='Enter SNO:').pack()
        sno=Entry(w)
        sno.pack()
        Button(w,text='Delete',command=lambda: c.execute("DELETE FROM provides WHERE SNO=(?) AND HOTELID=(?)",(sno.get(),hotelid.get()))).pack()
        w.mainloop()
        conn.commit()
        conn.close()

    def deleteRooms(self,mode):
        if mode==1:
            conn = sqlite3.connect('Hotel_Management.db')
            conn.execute("PRAGMA foreign_keys = 1")
            c = conn.cursor()
            w = Tk()
            w.iconbitmap(r'favicon.ico')
            Label(w,text='Enter RID:').pack()
            rid=Entry(w)
            rid.pack()
            Label(w,text='Enter HOTELID:').pack()
            hotelid=Entry(w)
            hotelid.pack()
            Button(w,text='Delete',command=lambda: c.execute("DELETE FROM rooms WHERE RID=(?) AND HOTELID=(?)",(rid.get(),hotelid.get()))).pack()
            w.mainloop()
            conn.commit()
            conn.close()
        else:
            conn = sqlite3.connect('Hotel_Management.db')
            conn.execute("PRAGMA foreign_keys = 1")
            c = conn.cursor()
            w = Tk()
            w.iconbitmap(r'favicon.ico')
            Label(w,text='Enter RID:').pack()
            rid=Entry(w)
            rid.pack()
            Label(w,text='Enter OID:').pack()
            oid=Entry(w)
            oid.pack()
            Label(w,text='Enter HOTELID:').pack()
            hotelid=Entry(w)
            hotelid.pack()
            Button(w,text='Delete',command=lambda: c.execute("""DELETE FROM rooms WHERE RID=(?) AND
                        HOTELID=(?) AND
                        (?) IN (SELECT HOTELID FROM hotel WHERE OID=(?));""",(rid.get(),hotelid.get(),hotelid.get(),oid.get()))).pack()
            w.mainloop()
            conn.commit()
            conn.close()
        